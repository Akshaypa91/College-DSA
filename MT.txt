;Find the ONES complement of an 8-bit and a 16-bit number.
;Find the TWOS complement of an 8-bit and a 16-bit number.
;Mask the 4 least significant bits (LSB) of an 8-bit number.
;Mask the 4 most significant bits (MSB) of an 8-bit number.
;Mask the 8 LSB of a 16-bit number.
;Mask the 8 MSB of a 16-bit number.
;Shift an 8-bit number to the left.
;Shift an 8-bit number to the right.
;Shift a 16-bit number to the left.
;Shift a 16-bit number to the right.
;Check whether a number is even or odd
.MODEL SMALL
.STACK 100
.DATA
OPERATION DB 00H 
NO1 DB 0H
NO2 DW 0H 
RESULT1 DB 0H
RESULT2 DW 0H
          
MSG1 DB 10,13,'ENTER 8 BIT NUMBER : $'
MSG2 DB 10,13,'ENTER OPERATION : $' 
MSG3 DB 10,13,'ENTER 16 BIT NUMBER : $' 
MSG4 DB 10,13,'ONES COMPLEMENT IS : $'
MSG5 DB 10,13,'TWOS COMPLEMENT IS : $'
MSG6 DB 10,13,'LOWER 4BITS(MASKED) OF 8BIT NO IS : $'
MSG7 DB 10,13,'HIGHER 4BITS(MASKED) OF 8BIT NO IS :$'
MSG8 DB 10,13,'LOWER 8BITS(MASKED) OF 16BIT NO IS : $ '
MSG9 DB 10,13,'HIGHER 8BITS(MASKED) OF 16BIT NO IS : $'
MSG10 DB 10,13,'LEFT SHIFTED 8 BIT NUMBER IS : $'
MSG11 DB 10,13,'RIGHT SHIFTED 8 BIT NUMBER IS : $'
MSG12 DB 10,13,'LEFT SHIFTED 16 BIT NUMBER IS : $'
MSG13 DB 10,13,'RIGHT SHIFTED 16 BIT NUMBER IS : $'
MSG14 DB 10,13,'NUMBER IS ODD $'
MSG15 DB 10,13,'NUMBER IS EVEN $'

.CODE
MOV AX,@DATA
MOV DS,AX

BEGIN:
LEA DX,MSG2
CALL PRINT_STR
CALL ACCEPT8
MOV OPERATION,BL   

CMP OPERATION,1H
JE ONES
 
CMP OPERATION,2H   
JE TWOS

CMP OPERATION,3H     
JE MASK4LSB 

CMP OPERATION,4H 
JE MASK4MSB    

CMP OPERATION,5H
JE MASK8LSB

CMP OPERATION,6H
JE MASK8MSB

CMP OPERATION,7H     
JE LEFT8

CMP OPERATION,8H
JE RIGHT8

CMP OPERATION,9H
JE LEFT16

CMP OPERATION,0AH
JE RIGHT16

CMP OPERATION,0BH
JE ODD_EVEN

CMP OPERATION,0CH
JE DONE



ONES:
LEA DX,MSG1
CALL PRINT_STR
CALL ACCEPT8
MOV NO1,BL
NOT NO1
LEA DX,MSG4
CALL PRINT_STR  
MOV BL,NO1
CALL PRINT8
JMP BEGIN 

TWOS:
LEA DX,MSG1
CALL PRINT_STR
CALL ACCEPT8
MOV NO1,BL
NEG NO1
LEA DX,MSG5
CALL PRINT_STR  
MOV BL,NO1
CALL PRINT8
JMP BEGIN  

MASK4LSB:
LEA DX,MSG1
CALL PRINT_STR
CALL ACCEPT8
MOV NO1,BL
AND NO1,0FH
LEA DX,MSG6
CALL PRINT_STR
MOV BL,NO1
CALL PRINT8
JMP BEGIN    

MASK4MSB:
LEA DX,MSG1
CALL PRINT_STR
CALL ACCEPT8
MOV NO1,BL
AND NO1,0F0H 
LEA DX,MSG7
CALL PRINT_STR
MOV BL,NO1
CALL PRINT8
JMP BEGIN  

MASK8LSB:
LEA DX,MSG3
CALL PRINT_STR
CALL ACCEPT16
MOV NO2,BX
AND NO2,00FFH 
LEA DX,MSG8
CALL PRINT_STR
MOV BX,NO2
CALL PRINT16
JMP BEGIN 

MASK8MSB:
LEA DX,MSG3
CALL PRINT_STR
CALL ACCEPT16
MOV NO2,BX
AND NO2,0FF00H 
LEA DX,MSG9
CALL PRINT_STR
MOV BX,NO2
CALL PRINT16
JMP BEGIN   
    
LEFT8:
LEA DX,MSG1
CALL PRINT_STR
CALL ACCEPT8
MOV NO1,BL
SHL NO1,01H 
LEA DX,MSG10
CALL PRINT_STR
MOV BL,NO1
CALL PRINT8
JMP BEGIN

RIGHT8:
LEA DX,MSG1
CALL PRINT_STR
CALL ACCEPT8
MOV NO1,BL
SHR NO1,01H  
LEA DX,MSG11
CALL PRINT_STR
MOV BL,NO1
CALL PRINT8
JMP BEGIN  

LEFT16:
LEA DX,MSG3
CALL PRINT_STR
CALL ACCEPT16
MOV NO2,BX
SHL NO2,01H  
LEA DX,MSG12
CALL PRINT_STR
MOV BX,NO2
CALL PRINT16
JMP BEGIN 

RIGHT16:
LEA DX,MSG3
CALL PRINT_STR
CALL ACCEPT16
MOV NO2,BX
SHR NO2,01H  
LEA DX,MSG13
CALL PRINT_STR
MOV BX,NO2
CALL PRINT16
JMP BEGIN 

ODD_EVEN:
LEA DX,MSG1
CALL PRINT_STR
CALL ACCEPT8  
MOV NO1,BL
AND NO1,01H
JZ EVEN
ODD:
LEA DX,MSG14
CALL PRINT_STR
JMP BEGIN
EVEN:
LEA DX,MSG15
CALL PRINT_STR  
JMP BEGIN


PRINT8:
MOV CH,02H
MOV CL,04H    
BA:
ROL BL,CL
MOV DL,BL
AND DL,0FH
CMP DL,0AH
JC L1
ADD DL,07H

L1:
ADD DL,30H
MOV AH,02H
INT 21H
DEC CH
JNZ BA
RET

PRINT16:
MOV CH,04H
MOV CL,04H    
BA2:
ROL BX,CL
MOV DL,BL
AND DL,0FH
CMP DL,0AH
JC L2
ADD DL,07H
L2:
ADD DL,30H
MOV AH,02H
INT 21H
DEC CH
JNZ BA2
RET      
    
    
ACCEPT8:
MOV CH,02H
MOV CL,04H
MOV BL,00H   

BACK1:
SHL BL,CL
MOV AH,01H
INT 21H
CMP AL,41H
JC L3
SUB AL,07H
L3:
SUB AL,30H
ADD BL,AL
DEC CH
JNZ BACK1
RET

ACCEPT16:
MOV CH,04H
MOV CL,04H
MOV BX,0000H  

BACK2:
SHL BX,CL
MOV AH,01H
INT 21H
CMP AL,41H
JC L4
SUB AL,07H
L4:
SUB AL,30H
MOV AH,0
ADD BX,AX
DEC CH
JNZ BACK2
RET

PRINT_STR:
MOV AH,09H
INT 21H
RET

DONE:
MOV AH,4CH
INT 21H